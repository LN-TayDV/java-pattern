====
    This project is licensed under the MIT license. Module model-view-viewmodel is using ZK framework licensed under LGPL (see lgpl-3.0.txt).

    The MIT License
    Copyright © 2014-2022 Ilkka Seppälä

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
====

Dưới đây là bảng với 15 mẫu thiết kế đầu tiên theo định dạng yêu cầu:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Abstract Document                  | Cho phép linh hoạt thêm hoặc thay đổi thuộc tính của một đối tượng một cách động mà không cần phải thay đổi mã nguồn của lớp đối tượng.                                    | Sử dụng trong hệ thống quản lý tài liệu nơi cấu trúc tài liệu có thể thay đổi và cần tính linh hoạt cao.                                                                                           |
| Abstract Factory                   | Cung cấp một giao diện để tạo ra một gia đình các đối tượng liên quan hoặc phụ thuộc mà không chỉ rõ lớp cụ thể của chúng.                                               | Sử dụng trong GUI toolkit nơi bạn có thể chuyển đổi giữa các giao diện khác nhau (Windows, macOS, Linux) mà không thay đổi mã nguồn của các thành phần GUI.                                         |
| Active Object                      | Phân tách các phương thức gọi (method calls) từ các đối tượng thực thi của chúng để tăng cường tính đồng thời và tránh trạng thái đua (race condition).                   | Sử dụng trong hệ thống giao dịch tài chính để xử lý các yêu cầu giao dịch song song mà không gây ra xung đột dữ liệu.                                                                             |
| Acyclic Visitor                    | Cho phép bạn thêm các hoạt động mới mà không ảnh hưởng đến các lớp hiện có và tránh phụ thuộc vòng tròn giữa các lớp.                                                     | Sử dụng trong hệ thống phân tích mã nguồn (code analysis) để áp dụng các quy tắc kiểm tra mã mà không làm ảnh hưởng đến các thành phần của cây cú pháp.                                            |
| Adapter                            | Chuyển đổi giao diện của một lớp thành một giao diện khác mà khách hàng mong đợi, giúp các lớp không tương thích có thể làm việc cùng nhau.                              | Sử dụng khi tích hợp một thư viện cũ vào một hệ thống mới mà giao diện của chúng không tương thích.                                                                                               |
| Aggregator Microservices           | Kết hợp kết quả từ nhiều dịch vụ vi mô (microservices) để cung cấp một phản hồi tổng hợp cho người dùng.                                                                 | Sử dụng trong hệ thống thương mại điện tử để tổng hợp thông tin sản phẩm từ nhiều dịch vụ như kho hàng, đánh giá sản phẩm, và dịch vụ khuyến mãi.                                                   |
| Ambassador                         | Tạo ra một đối tượng đại diện để xử lý các giao tiếp với các dịch vụ từ xa hoặc tài nguyên phân tán, giúp đơn giản hóa giao diện và cải thiện khả năng phục hồi.          | Sử dụng trong các ứng dụng đám mây để quản lý các kết nối đến các dịch vụ đám mây và xử lý các lỗi kết nối một cách tự động.                                                                      |
| Anti-corruption Layer              | Tạo ra một lớp giữa hệ thống mới và hệ thống cũ để chuyển đổi các mô hình dữ liệu và tránh làm ô nhiễm hệ thống mới với các vấn đề của hệ thống cũ.                      | Sử dụng khi di chuyển một hệ thống cũ sang một nền tảng mới mà không muốn mang theo các vấn đề kỹ thuật và mô hình dữ liệu của hệ thống cũ.                                                        |
| API Gateway                        | Cung cấp một điểm vào duy nhất cho một nhóm các microservices, xử lý các yêu cầu và chuyển tiếp chúng đến các dịch vụ thích hợp.                                        | Sử dụng trong kiến trúc microservices để quản lý các yêu cầu từ phía client và chuyển tiếp chúng đến các dịch vụ backend.                                                                          |
| Arrange-Act-Assert                 | Một mẫu thử nghiệm (testing pattern) để sắp xếp các điều kiện ban đầu, thực hiện hành động và xác nhận kết quả mong đợi.                                                  | Sử dụng trong phát triển phần mềm TDD (Test-Driven Development) để đảm bảo mã nguồn hoạt động đúng theo yêu cầu.                                                                                   |
| Async Method Invocation            | Một mẫu thiết kế để gọi các phương thức không đồng bộ và xử lý kết quả sau khi phương thức hoàn thành.                                                                   | Sử dụng trong các ứng dụng web để xử lý các yêu cầu HTTP không đồng bộ, giúp cải thiện hiệu năng và trải nghiệm người dùng.                                                                        |
| Balking                            | Một mẫu thiết kế để ngăn chặn một hành động được thực hiện nếu các điều kiện nhất định không được đáp ứng.                                                                | Sử dụng trong hệ thống quản lý tài nguyên để ngăn chặn các hành động như ghi đè dữ liệu khi điều kiện không cho phép.                                                                              |
| Bridge                             | Phân tách một abstraction từ implementation của nó để cả hai có thể phát triển độc lập.                                                                                 | Sử dụng trong hệ thống thiết kế đồ họa để phân tách giao diện người dùng từ mã xử lý đồ họa.                                                                                                       |
| Builder                            | Tạo ra các đối tượng phức tạp bằng cách sử dụng một đối tượng đơn giản hơn (builder) mà không cần phải khởi tạo trực tiếp.                                               | Sử dụng trong hệ thống xây dựng tài liệu hoặc cấu hình hệ thống nơi cần khởi tạo các đối tượng phức tạp với nhiều thuộc tính.                                                                      |
| Business Delegate                  | Giảm sự phụ thuộc giữa các lớp client và các lớp nghiệp vụ, đồng thời giảm sự phức tạp của giao tiếp giữa chúng.                                                         | Sử dụng trong các ứng dụng doanh nghiệp để quản lý các kết nối và yêu cầu đến các dịch vụ nghiệp vụ.                                                                                               |

Tiếp theo là bảng với 15 mẫu thiết kế tiếp theo:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Bytecode                           | Một dạng mã trung gian được biên dịch từ mã nguồn để thực thi trên một máy ảo.                                                                                           | Sử dụng trong các ngôn ngữ lập trình như Java để biên dịch mã nguồn sang bytecode và thực thi trên JVM.                                                                                            |
| Caching                            | Lưu trữ dữ liệu tạm thời để giảm thời gian truy xuất và cải thiện hiệu năng hệ thống.                                                                                     | Sử dụng trong các hệ thống web để lưu trữ tạm thời kết quả truy vấn cơ sở dữ liệu nhằm giảm tải cho cơ sở dữ liệu.                                                                                  |
| Callback                           | Một kỹ thuật cho phép một hàm (function) được gọi lại khi một nhiệm vụ nhất định hoàn thành.                                                                             | Sử dụng trong lập trình sự kiện để xử lý các sự kiện như nhấn nút hoặc nhận dữ liệu từ máy chủ.                                                                                                    |
| Chain of Responsibility            | Tạo ra một chuỗi các đối tượng để xử lý yêu cầu, nơi mỗi đối tượng có cơ hội xử lý yêu cầu hoặc chuyển nó cho đối tượng tiếp theo trong chuỗi.                              | Sử dụng trong hệ thống xử lý yêu cầu như hệ thống xử lý sự kiện hoặc luồng công việc.                                                                                                              |
| Circuit Breaker                    | Ngăn chặn các yêu cầu đến một dịch vụ bị lỗi để tránh làm hệ thống bị quá tải và cho phép khôi phục khi dịch vụ trở lại bình thường.                                      | Sử dụng trong các hệ thống phân tán để quản lý các lỗi và tăng tính sẵn sàng của hệ thống.                                                                                                        |
| Client Session                     | Quản lý thông tin và trạng thái của phiên làm việc của một client trong suốt quá trình tương tác với hệ thống.                                                            | Sử dụng trong các ứng dụng web để theo dõi trạng thái đăng nhập và thông tin người dùng.                                                                                                          |
| Collecting Parameter               | Thu thập các giá trị tham số đầu vào trong một đối tượng duy nhất để dễ dàng quản lý và truyền chúng qua các phương thức.                                                  | Sử dụng trong lập trình để đơn giản hóa việc truyền nhiều tham số vào một phương thức hoặc hàm.                                                                                                    |
| Collection Pipeline                | Sử dụng một chuỗi các hoạt động để xử lý và chuyển đổi các phần tử trong một collection một cách tuần tự.                                                                 | Sử dụng trong các hệ thống xử lý dữ liệu lớn để áp dụng các thao tác như lọc, sắp xếp và chuyển đổi trên các tập dữ liệu.                                                                          |
| Combinator                         | Kết hợp các hàm hoặc đối tượng nhỏ hơn để tạo thành các hàm hoặc đối tượng phức tạp hơn.                                                                                   | Sử dụng trong lập trình hàm (functional programming) để xây dựng các hàm phức tạp từ các hàm đơn giản hơn.                                                                                         |
| Command                            | Biểu diễn một yêu cầu dưới dạng một đối tượng, cho phép tham số hóa các đối tượng khác với các yêu cầu khác nhau và hỗ trợ việc xếp hàng hoặc ghi lại các yêu cầu.        | Sử dụng trong hệ thống undo/redo hoặc hệ thống giao dịch để xử lý các yêu cầu dưới dạng các đối tượng riêng biệt.                                                                                  |
| Command Query Responsibility Segregation (CQRS) | Tách riêng việc đọc và ghi dữ liệu bằng cách sử dụng các mô hình khác nhau cho mỗi thao tác.                                                                  | Sử dụng trong hệ thống quy mô lớn để tối ưu hóa hiệu năng và khả năng mở rộng bằng cách tách riêng logic đọc và ghi dữ liệu.                                                                       |
| Commander                          | Một biến thể của mẫu Command, nhưng tập trung vào việc thực thi các lệnh đồng bộ hoặc không đồng bộ.                                                                    | Sử dụng trong hệ thống game để quản lý các hành động của nhân vật hoặc các đối tượng trong game.                                                                                                  |
| Component                          | Tạo ra các đối tượng có thể tái sử dụng và dễ dàng kết hợp với nhau để xây dựng các ứng dụng phức tạp hơn.                                                                | Sử dụng trong phát triển phần mềm để xây dựng các thành phần giao diện người dùng hoặc các module phần mềm có thể tái sử dụng.                                                                    |
| Composite                          | Tạo ra các đối tượng cấu trúc cây để thể hiện một phần hoặc toàn bộ hệ thống phân cấp, cho phép xử lý các đối tượng đơn lẻ và tổ hợp một cách thống nhất.                | Sử dụng trong hệ thống đồ họa hoặc hệ thống quản lý tài liệu để biểu diễn cấu trúc phân cấp của các đối tượng.                                                                                     |
| Composite Entity                   | Sử dụng các đối tượng phức hợp để biểu diễn các thực thể doanh nghiệp có mối quan hệ với nhau.                                                                          | Sử dụng trong các ứng dụng doanh nghiệp để quản lý các thực thể có quan hệ phức tạp, như đơn hàng và chi tiết đơn hàng.                                                                            |

Tiếp tục với 15 mẫu thiết kế tiếp theo:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Composite View                     | Tạo ra một giao diện phức hợp bằng cách kết hợp các phần tử giao diện đơn lẻ.                                                                                            | Sử dụng trong phát triển ứng dụng web để xây dựng các giao diện phức tạp từ các thành phần đơn giản hơn.                                                                                           |
| Context Object                     | Cung cấp một đối tượng bối cảnh để lưu trữ và truy xuất thông tin cấu hình hoặc trạng thái trong suốt vòng đời của một ứng dụng.                                         | Sử dụng trong các ứng dụng web để quản lý thông tin cấu hình hoặc trạng thái phiên làm việc của người dùng.                                                                                       |
| Converter                          | Chuyển đổi một đối tượng từ dạng này sang dạng khác.                                                                                                                     | Sử dụng trong các hệ thống tích hợp để chuyển đổi dữ liệu giữa các định dạng khác nhau, như JSON sang XML.                                                                                         |
| Curiously Recurring Template Pattern (CRTP) | Một kỹ thuật lập trình mà một lớp con kế thừa từ một lớp cha mà lớp cha này sử dụng lớp con như một tham số kiểu.                                                  | Sử dụng trong lập trình C++ để tạo ra các lớp con mà không mất đi kiểu tĩnh của chúng.                                                                                                            |
| Currying                           | Kỹ thuật chuyển đổi một hàm nhận nhiều tham số thành một chuỗi các hàm mà mỗi hàm nhận một tham số.                                                                        | Sử dụng trong lập trình hàm để tạo ra các hàm mới từ các hàm hiện có bằng cách cố định một số tham số.                                                                                             |
| Data Access Object (DAO)           | Cung cấp một giao diện trừu tượng để thực hiện các thao tác cơ sở dữ liệu.                                                                                               | Sử dụng trong các ứng dụng doanh nghiệp để tách biệt logic truy cập cơ sở dữ liệu từ logic nghiệp vụ.                                                                                             |
| Data Bus                           | Cho phép các thành phần trong một hệ thống trao đổi dữ liệu thông qua một kênh truyền thông chung.                                                                       | Sử dụng trong các hệ thống nhúng hoặc hệ thống xử lý dữ liệu để truyền dữ liệu giữa các thành phần.                                                                                               |
| Data Locality                      | Tối ưu hóa việc truy cập dữ liệu bằng cách sắp xếp dữ liệu theo cách giảm thiểu thời gian truy cập bộ nhớ.                                                                | Sử dụng trong lập trình hệ thống hoặc ứng dụng thời gian thực để cải thiện hiệu năng truy cập dữ liệu.                                                                                            |
| Data Mapper                        | Một lớp chịu trách nhiệm chuyển đổi dữ liệu giữa các lớp đối tượng và cơ sở dữ liệu mà không để lộ chi tiết của cơ sở dữ liệu.                                            | Sử dụng trong các ứng dụng ORM (Object-Relational Mapping) để quản lý sự tương tác giữa lớp đối tượng và cơ sở dữ liệu.                                                                            |
| Data Transfer Object (DTO)         | Một đối tượng đơn giản dùng để chuyển dữ liệu giữa các lớp hoặc tầng khác nhau trong một ứng dụng.                                                                        | Sử dụng trong các ứng dụng phân tán để truyền dữ liệu giữa client và server mà không cần tiết lộ chi tiết của mô hình đối tượng.                                                                  |
| Decorator                          | Cho phép thêm các hành vi mới vào các đối tượng một cách linh hoạt bằng cách gói chúng trong các đối tượng decorator.                                                    | Sử dụng trong các hệ thống GUI để thêm các tính năng như cuộn hoặc trang trí vào các thành phần giao diện người dùng.                                                                              |
| Delegation                         | Một đối tượng bên ngoài giúp một đối tượng khác thực hiện một hành động.                                                                                                 | Sử dụng trong các ứng dụng di động để quản lý các sự kiện giao diện người dùng mà không cần kế thừa các lớp điều khiển.                                                                            |
| Dependency Injection               | Cung cấp các phụ thuộc của một đối tượng từ bên ngoài, thường là thông qua constructor hoặc setter.                                                                       | Sử dụng trong các khung phát triển ứng dụng như Spring để quản lý các phụ thuộc giữa các đối tượng và tăng tính linh hoạt, dễ kiểm tra của mã nguồn.                                               |
| Dirty Flag                         | Một kỹ thuật tối ưu hóa để đánh dấu các đối tượng hoặc dữ liệu đã bị thay đổi và cần được cập nhật.                                                                        | Sử dụng trong các hệ thống đồ họa hoặc cơ sở dữ liệu để giảm thiểu số lượng cập nhật không cần thiết.                                                                                              |
| Domain Model                       | Một mô hình trừu tượng hóa các khái niệm trong lĩnh vực nghiệp vụ của ứng dụng và mối quan hệ giữa chúng.                                                                | Sử dụng trong các ứng dụng doanh nghiệp để biểu diễn các đối tượng và logic nghiệp vụ một cách rõ ràng và dễ hiểu.                                                                                 |

Tiếp tục với 15 mẫu thiết kế tiếp theo:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Double Buffer                      | Sử dụng hai bộ đệm để giảm thiểu thời gian chờ trong quá trình đọc và ghi dữ liệu.                                                                                        | Sử dụng trong hệ thống xử lý video hoặc game để hiển thị hình ảnh một cách mượt mà.                                                                                                               |
| Double Checked Locking             | Một kỹ thuật tối ưu hóa việc sử dụng khóa để đảm bảo rằng một tài nguyên chỉ được khởi tạo một lần trong môi trường đa luồng.                                              | Sử dụng trong các hệ thống đa luồng để tránh khởi tạo đối tượng nhiều lần, cải thiện hiệu năng.                                                                                                   |
| Double Dispatch                    | Một kỹ thuật lập trình để gọi phương thức phù hợp dựa trên kiểu động của hai đối tượng.                                                                                    | Sử dụng trong hệ thống xử lý đồ họa để áp dụng các phép toán khác nhau trên các đối tượng đồ họa khác nhau.                                                                                       |
| Dynamic Proxy                      | Sử dụng các đối tượng proxy được tạo ra động để xử lý các lời gọi phương thức tại thời gian chạy.                                                                           | Sử dụng trong các hệ thống bảo mật hoặc logging để quản lý các lời gọi phương thức một cách động.                                                                                                 |
| Embedded Value                     | Lưu trữ các giá trị trong một đối tượng khác để tận dụng lợi thế của tính đồng nhất và tối ưu hóa không gian bộ nhớ.                                                       | Sử dụng trong các hệ thống cơ sở dữ liệu để tối ưu hóa không gian lưu trữ và truy xuất dữ liệu.                                                                                                    |
| Event Aggregator                   | Tập trung việc xử lý các sự kiện từ nhiều nguồn khác nhau và phân phối chúng tới các listener tương ứng.                                                                   | Sử dụng trong các hệ thống event-driven để quản lý và phân phối các sự kiện một cách hiệu quả.                                                                                                    |
| Event-Based Asynchronous           | Thiết kế hệ thống xử lý các yêu cầu không đồng bộ bằng cách sử dụng các sự kiện để thông báo kết quả hoặc trạng thái của các yêu cầu.                                      | Sử dụng trong các hệ thống web để xử lý các yêu cầu HTTP không đồng bộ và cải thiện hiệu năng.                                                                                                    |
| Event-Driven Architecture          | Một kiến trúc phần mềm trong đó các thành phần giao tiếp thông qua các sự kiện.                                                                                           | Sử dụng trong các hệ thống xử lý thời gian thực hoặc hệ thống tài chính để phản ứng nhanh chóng với các sự kiện xảy ra.                                                                            |
| Event Queue                        | Một cơ chế xếp hàng các sự kiện để xử lý theo thứ tự, giúp điều phối các hành động một cách tuần tự.                                                                       | Sử dụng trong hệ thống game hoặc hệ thống điều khiển robot để xử lý các hành động một cách tuần tự và tránh xung đột.                                                                              |
| Event Sourcing                     | Lưu trữ trạng thái của một hệ thống dưới dạng một chuỗi các sự kiện, giúp theo dõi lịch sử và khôi phục trạng thái.                                                        | Sử dụng trong các hệ thống tài chính hoặc hệ thống quản lý dữ liệu để duy trì tính toàn vẹn và khả năng khôi phục dữ liệu.                                                                         |
| Execute Around                     | Một kỹ thuật để đảm bảo rằng các tài nguyên được mở và đóng một cách an toàn bằng cách bao bọc các thao tác trong một khối mã.                                             | Sử dụng trong quản lý kết nối cơ sở dữ liệu hoặc các tài nguyên hệ thống khác để đảm bảo chúng được đóng đúng cách sau khi sử dụng.                                                                |
| Extension Objects                  | Một kỹ thuật để thêm các tính năng mới vào các đối tượng hiện có mà không làm thay đổi lớp của chúng.                                                                      | Sử dụng trong các hệ thống có yêu cầu mở rộng tính năng một cách linh hoạt mà không làm gián đoạn hoạt động hiện tại.                                                                              |
| Facade                             | Cung cấp một giao diện đơn giản hơn để truy cập một nhóm các giao diện phức tạp trong một hệ thống con.                                                                   | Sử dụng trong các hệ thống lớn để cung cấp một giao diện đơn giản cho người dùng hoặc các hệ thống khác, ẩn đi sự phức tạp của các thành phần bên trong.                                          |
| Factory                            | Cung cấp một phương thức để tạo ra các đối tượng mà không cần chỉ định lớp cụ thể của chúng, thường được sử dụng với các lớp kế thừa.                                      | Sử dụng trong các hệ thống mà việc tạo ra các đối tượng phức tạp và có nhiều lớp kế thừa khác nhau, như hệ thống GUI hoặc hệ thống quản lý dữ liệu.                                                |
| Factory Kit                        | Cung cấp một bộ công cụ để tạo ra các đối tượng với nhiều cấu hình khác nhau mà không cần thay đổi mã nguồn của chúng.                                                     | Sử dụng trong các hệ thống cần tạo ra các đối tượng với nhiều biến thể hoặc cấu hình khác nhau, như hệ thống tạo ra các đối tượng sản phẩm với nhiều tùy chọn khác nhau.                          |
Dưới đây là bảng tiếp theo với 15 mẫu thiết kế kế tiếp:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Factory Method                     | Cung cấp một giao diện để tạo đối tượng, nhưng để các lớp con quyết định lớp nào sẽ được khởi tạo.                                                                        | Sử dụng khi lớp tạo đối tượng không biết chính xác lớp nào cần được khởi tạo, chẳng hạn như khi xây dựng một framework cho các widget GUI.                                                          |
| Fanout-Fanin                       | Mô hình phân phối công việc tới nhiều tác vụ song song và sau đó thu thập kết quả từ các tác vụ đó.                                                                        | Sử dụng trong hệ thống xử lý dữ liệu lớn để chia nhỏ công việc và sau đó tổng hợp kết quả cuối cùng.                                                                                              |
| Feature Toggle                     | Kỹ thuật để bật hoặc tắt các tính năng trong phần mềm mà không cần triển khai lại mã nguồn.                                                                               | Sử dụng trong quá trình phát triển và thử nghiệm phần mềm để quản lý các tính năng đang phát triển hoặc thử nghiệm A/B testing.                                                                  |
| Filterer                           | Áp dụng một chuỗi các bộ lọc để xử lý dữ liệu hoặc sự kiện.                                                                                                               | Sử dụng trong các ứng dụng web để xử lý các yêu cầu HTTP hoặc trong hệ thống xử lý ảnh để áp dụng các bộ lọc hình ảnh.                                                                            |
| Fluent Interface                   | Cung cấp một API để xây dựng các đối tượng bằng cách gọi các phương thức theo chuỗi, tạo ra mã nguồn rõ ràng và dễ đọc hơn.                                               | Sử dụng trong các thư viện xây dựng đối tượng hoặc các API như xây dựng truy vấn SQL.                                                                                                             |
| Flux                               | Một kiến trúc ứng dụng cho phép xây dựng các ứng dụng một chiều, nơi dữ liệu chảy từ một nguồn duy nhất và trạng thái ứng dụng được quản lý nhất quán.                    | Sử dụng trong phát triển ứng dụng web hiện đại với React hoặc Redux để quản lý trạng thái ứng dụng.                                                                                               |
| Flyweight                          | Giảm bớt việc sử dụng bộ nhớ bằng cách chia sẻ các đối tượng dùng chung để hỗ trợ các đối tượng có kích thước nhỏ hơn.                                                    | Sử dụng trong các hệ thống quản lý ký tự hoặc trò chơi để giảm thiểu việc tạo ra nhiều đối tượng nhỏ lặp đi lặp lại.                                                                              |
| Front Controller                   | Một bộ điều khiển duy nhất xử lý tất cả các yêu cầu và sau đó phân phối chúng tới các bộ điều khiển cụ thể khác.                                                          | Sử dụng trong các ứng dụng web để xử lý tất cả các yêu cầu từ người dùng và phân phối chúng tới các bộ điều khiển cụ thể.                                                                         |
| Game Loop                          | Cung cấp một vòng lặp chính để điều khiển luồng của trò chơi, xử lý các cập nhật và đầu vào của người chơi.                                                               | Sử dụng trong phát triển trò chơi để quản lý vòng lặp chính, bao gồm cập nhật trạng thái trò chơi và xử lý đầu vào từ người chơi.                                                                 |
| Gateway                            | Cung cấp một điểm vào duy nhất cho một nhóm các microservices, xử lý các yêu cầu và chuyển tiếp chúng đến các dịch vụ thích hợp.                                        | Sử dụng trong kiến trúc microservices để quản lý các yêu cầu từ phía client và chuyển tiếp chúng đến các dịch vụ backend.                                                                          |
| Guarded Suspension                 | Đình chỉ việc thực hiện một hành động cho đến khi một điều kiện cụ thể được thỏa mãn.                                                                                      | Sử dụng trong lập trình đa luồng để quản lý các tài nguyên chia sẻ mà chỉ có thể truy cập khi có điều kiện nhất định.                                                                              |
| Half-Sync/Half-Async               | Tách biệt phần xử lý đồng bộ và không đồng bộ trong một hệ thống để tận dụng cả hai mô hình.                                                                               | Sử dụng trong các hệ thống mạng để xử lý các yêu cầu không đồng bộ trong khi vẫn giữ được sự đơn giản của xử lý đồng bộ.                                                                           |
| Health Check                       | Cung cấp một cơ chế để kiểm tra tình trạng hoạt động của một hệ thống hoặc dịch vụ.                                                                                       | Sử dụng trong các hệ thống phân tán để giám sát tình trạng hoạt động của các dịch vụ và đảm bảo chúng hoạt động bình thường.                                                                      |
| Hexagonal                          | Một kiến trúc phần mềm cho phép tách biệt logic nghiệp vụ với các thành phần giao tiếp bên ngoài như cơ sở dữ liệu và UI.                                                 | Sử dụng trong phát triển phần mềm để xây dựng các hệ thống dễ bảo trì và mở rộng, có thể thay đổi thành phần giao tiếp bên ngoài mà không ảnh hưởng đến logic nghiệp vụ.                           |
| Identity Map                       | Giảm bớt số lượng truy vấn cơ sở dữ liệu bằng cách lưu trữ các đối tượng đã truy vấn vào bộ nhớ tạm thời và trả về đối tượng đó nếu nó đã tồn tại.                        | Sử dụng trong các hệ thống ORM để cải thiện hiệu năng bằng cách giảm số lượng truy vấn cơ sở dữ liệu.                                                                                             |

Tiếp tục với bảng với 15 mẫu thiết kế tiếp theo:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Intercepting Filter                | Tạo ra một chuỗi các bộ lọc để xử lý các yêu cầu hoặc phản hồi trước khi chúng được xử lý bởi thành phần chính.                                                           | Sử dụng trong các ứng dụng web để xử lý các yêu cầu HTTP như xác thực, logging, hoặc nén dữ liệu trước khi xử lý chính.                                                                            |
| Interpreter                        | Cung cấp một cách để đánh giá ngữ pháp hoặc ngôn ngữ theo cách riêng của nó bằng cách sử dụng một cây cú pháp (syntax tree).                                              | Sử dụng trong các ứng dụng biên dịch hoặc xử lý ngôn ngữ để đánh giá và thực thi mã nguồn hoặc biểu thức.                                                                                          |
| Iterator                           | Cung cấp một cách để truy cập tuần tự các phần tử trong một collection mà không cần lộ ra cấu trúc bên trong của nó.                                                      | Sử dụng trong các cấu trúc dữ liệu để cung cấp một cách truy cập và duyệt qua các phần tử một cách nhất quán.                                                                                      |
| Layers                             | Tách biệt các mối quan tâm bằng cách phân chia hệ thống thành các lớp với các trách nhiệm khác nhau, thường bao gồm lớp trình bày, lớp nghiệp vụ và lớp dữ liệu.          | Sử dụng trong phát triển phần mềm để tổ chức mã nguồn theo các lớp logic khác nhau, giúp dễ dàng bảo trì và mở rộng.                                                                               |
| Lazy Loading                       | Trì hoãn việc khởi tạo một đối tượng cho đến khi nó thực sự cần thiết.                                                                                                    | Sử dụng trong các ứng dụng cần tối ưu hóa hiệu suất và tài nguyên bằng cách trì hoãn tải các đối tượng không cần thiết ngay lập tức.                                                               |
| Leader Election                    | Một thuật toán để chọn ra một nút làm lãnh đạo trong một hệ thống phân tán, chịu trách nhiệm điều phối các hoạt động.                                                     | Sử dụng trong các hệ thống phân tán để đảm bảo một nút duy nhất chịu trách nhiệm cho các tác vụ quan trọng như quản lý tài nguyên hoặc điều phối giao tiếp.                                       |
| Leader-Followers                   | Một mô hình đồng bộ hóa trong đó một luồng chính (leader) điều phối các luồng khác (followers) để xử lý các tác vụ đồng bộ.                                               | Sử dụng trong hệ thống xử lý sự kiện hoặc server đa luồng để tối ưu hóa việc phân công và thực thi các tác vụ.                                                                                     |
| Localization                       | Tạo ra các phiên bản phần mềm hỗ trợ nhiều ngôn ngữ và định dạng địa phương khác nhau.                                                                                    | Sử dụng trong phát triển phần mềm quốc tế hóa để hỗ trợ người dùng từ các quốc gia khác nhau.                                                                                                     |
| Lockable Object                    | Cung cấp một cơ chế để khóa một đối tượng và đảm bảo rằng nó không bị thay đổi bởi các luồng khác trong suốt quá trình khóa.                                              | Sử dụng trong lập trình đa luồng để bảo vệ tài nguyên chia sẻ khỏi các xung đột.                                                                                                                  |
| Log Aggregation                    | Thu thập và lưu trữ các bản ghi log từ nhiều nguồn khác nhau vào một nơi để dễ dàng phân tích và xử lý.                                                                   | Sử dụng trong các hệ thống lớn để quản lý và phân tích log từ nhiều máy chủ hoặc dịch vụ.                                                                                                          |
| Marker                             | Sử dụng một interface không có phương thức để đánh dấu một lớp, cho biết lớp đó có những đặc điểm hoặc hành vi đặc biệt nào đó.                                            | Sử dụng trong lập trình để gắn nhãn các lớp mà không cần thêm hành vi hoặc dữ liệu cụ thể, như Serializable trong Java.                                                                            |
| Master-Worker                      | Một mẫu thiết kế phân chia công việc giữa một nút chủ (master) và nhiều nút công nhân (worker) để thực hiện các tác vụ song song.                                         | Sử dụng trong hệ thống xử lý dữ liệu lớn hoặc các ứng dụng cần thực thi nhiều tác vụ đồng thời để tăng cường hiệu suất.                                                                            |
| Mediator                           | Giảm thiểu sự phụ thuộc giữa các đối tượng bằng cách giới thiệu một đối tượng trung gian (mediator) để quản lý các tương tác giữa chúng.                                  | Sử dụng trong các hệ thống GUI để quản lý các tương tác giữa các thành phần giao diện người dùng mà không cần biết chi tiết về nhau.                                                               |
| Memento                            | Cho phép lưu trữ và khôi phục trạng thái trước đó của một đối tượng mà không vi phạm tính đóng gói.                                                                       | Sử dụng trong các ứng dụng cần chức năng undo/redo, như trình soạn thảo văn bản hoặc phần mềm đồ họa.                                                                                             |
| Metadata Mapping                   | Chuyển đổi dữ liệu giữa các lớp đối tượng và cơ sở dữ liệu dựa trên thông tin cấu hình.                                                                                   | Sử dụng trong các hệ thống ORM để ánh xạ các lớp đối tượng sang các bảng cơ sở dữ liệu mà không cần viết mã SQL trực tiếp.                                                                          |

Tiếp tục với bảng với 15 mẫu thiết kế tiếp theo:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Model-View-Controller (MVC)        | Tách biệt ứng dụng thành ba thành phần chính: Model (dữ liệu), View (giao diện người dùng) và Controller (xử lý logic) để dễ dàng quản lý và mở rộng.                    | Sử dụng trong phát triển ứng dụng web và desktop để tổ chức mã nguồn một cách rõ ràng và phân tách các mối quan tâm.                                                                              |
| Model-View-Intent (MVI)            | Một biến thể của MVC tập trung vào việc định hướng các intent của người dùng để thay đổi trạng thái của Model và cập nhật View.                                          | Sử dụng trong phát triển ứng dụng di động để quản lý trạng thái ứng dụng một cách rõ ràng và dễ theo dõi.                                                                                          |
| Model-View-Presenter (MVP)         | Tách biệt ứng dụng thành ba thành phần: Model (dữ liệu), View (giao diện người dùng) và Presenter (xử lý logic), với việc Presenter điều khiển mọi tương tác giữa Model và View. | Sử dụng trong phát triển ứng dụng để tăng khả năng kiểm thử và tách biệt logic nghiệp vụ từ giao diện người dùng.                                                                                  |
| Model-View-ViewModel (MVVM)        | Tách biệt ứng dụng thành ba thành phần: Model (dữ liệu), View (giao diện người dùng) và ViewModel (cầu nối giữa Model và View) để quản lý trạng thái và logic nghiệp vụ.   | Sử dụng trong phát triển ứng dụng WPF hoặc các framework JavaScript như Angular để quản lý trạng thái và cập nhật giao diện người dùng.                                                            |
| Monad                              | Cung cấp một cách để xử lý các thao tác tính toán theo chuỗi, đặc biệt hữu ích trong việc xử lý các tác vụ bất đồng bộ và quản lý tác vụ phụ thuộc.                       | Sử dụng trong lập trình hàm để quản lý tác vụ bất đồng bộ, xử lý ngoại lệ và tác vụ phụ thuộc một cách rõ ràng và an toàn.                                                                         |
| Monitor                            | Một cơ chế đồng bộ hóa để quản lý việc truy cập đồng thời đến các tài nguyên chia sẻ bằng cách sử dụng các phương thức khóa và mở khóa.                                    | Sử dụng trong lập trình đa luồng để đảm bảo tính nhất quán của dữ liệu khi có nhiều luồng truy cập.                                                                                                |
| Monostate                          | Một biến thể của mẫu Singleton, nơi trạng thái được chia sẻ giữa tất cả các đối tượng của một lớp, thay vì chỉ có một thể hiện duy nhất.                                    | Sử dụng khi cần chia sẻ trạng thái giữa nhiều đối tượng nhưng không muốn giới hạn ứng dụng vào một thể hiện duy nhất như Singleton.                                                                 |
| Multiton                           | Mở rộng mẫu Singleton để quản lý nhiều đối tượng đơn nhất, mỗi đối tượng được nhận diện bởi một khóa duy nhất.                                                             | Sử dụng khi cần quản lý nhiều thực thể đơn nhất mà mỗi thực thể đại diện cho một nhóm đối tượng hoặc một ngữ cảnh cụ thể.                                                                            |
| Mute Idiom                         | Một cách xử lý ngoại lệ bằng cách "mute" hoặc bỏ qua các ngoại lệ không quan trọng mà không gây gián đoạn chương trình.                                                   | Sử dụng trong các tình huống mà ngoại lệ không ảnh hưởng nghiêm trọng đến luồng chương trình và có thể bỏ qua một cách an toàn.                                                                     |
| Naked Objects                      | Một kiến trúc phát triển phần mềm trong đó các đối tượng nghiệp vụ tự quản lý giao diện người dùng của chúng mà không cần lớp trung gian.                                  | Sử dụng trong các hệ thống doanh nghiệp để tăng tốc độ phát triển bằng cách tự động hóa giao diện người dùng dựa trên các đối tượng nghiệp vụ.                                                      |
| Notification                       | Gửi các thông báo hoặc sự kiện từ một đối tượng đến các đối tượng khác mà không cần sự phụ thuộc trực tiếp giữa các đối tượng.                                             | Sử dụng trong các hệ thống event-driven hoặc các ứng dụng cần giao tiếp không đồng bộ giữa các thành phần.                                                                                          |
| Null Object                        | Cung cấp một đối tượng thay thế cho null để tránh các lỗi null pointer và giảm bớt việc kiểm tra null trong mã nguồn.                                                     | Sử dụng trong lập trình để cung cấp các đối tượng mặc định thay cho null, giúp mã nguồn rõ ràng và dễ bảo trì hơn.                                                                                  |
| Object Mother                      | Cung cấp các phương thức tạo đối tượng mẫu cho các bài kiểm thử, giúp giảm thiểu mã kiểm thử lặp lại và tăng tính dễ đọc của mã kiểm thử.                                 | Sử dụng trong viết kiểm thử tự động để dễ dàng tạo ra các đối tượng mẫu cho các trường hợp kiểm thử khác nhau.                                                                                      |
| Object Pool                        | Quản lý việc tái sử dụng các đối tượng thay vì tạo mới chúng mỗi lần, giúp cải thiện hiệu suất trong các ứng dụng yêu cầu khởi tạo đối tượng tốn kém.                       | Sử dụng trong các hệ thống cần quản lý tài nguyên như kết nối cơ sở dữ liệu hoặc các đối tượng đồ họa.                                                                                              |
| Observer                           | Định nghĩa một sự phụ thuộc một-nhiều giữa các đối tượng để khi một đối tượng thay đổi trạng thái, tất cả các đối tượng phụ thuộc được thông báo và cập nhật tự động.       | Sử dụng trong các hệ thống sự kiện hoặc các ứng dụng cần cập nhật giao diện người dùng khi dữ liệu thay đổi.                                                                                         |

Tiếp tục với bảng với 15 mẫu thiết kế tiếp theo:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Optimistic Offline Lock            | Một cơ chế để quản lý các thay đổi đồng thời bằng cách giả định rằng xung đột sẽ hiếm khi xảy ra và chỉ xử lý chúng khi xảy ra xung đột thực sự.                        | Sử dụng trong các hệ thống phân tán hoặc các ứng dụng cần quản lý các thay đổi đồng thời mà không cần sử dụng khóa phức tạp.                                                                       |
| Page Controller                    | Một mẫu thiết kế trong đó mỗi trang web có một bộ điều khiển riêng để xử lý các yêu cầu và quản lý luồng dữ liệu cho trang đó.                                           | Sử dụng trong các ứng dụng web để quản lý các logic nghiệp vụ và luồng dữ liệu riêng cho từng trang web.                                                                                          |
| Page Object                        | Một mẫu thiết kế trong kiểm thử tự động, trong đó mỗi trang của ứng dụng được đại diện bởi một lớp, giúp dễ dàng quản lý và kiểm thử các thành phần giao diện người dùng. | Sử dụng trong kiểm thử tự động để tạo ra các lớp đại diện cho các trang web, giúp dễ dàng viết và bảo trì các bài kiểm thử giao diện người dùng.                                                  |
| Parameter Object                   | Đóng gói nhiều tham số thành một đối tượng duy nhất để đơn giản hóa việc truyền tham số và cải thiện khả năng đọc của mã nguồn.                                          | Sử dụng trong các hàm hoặc phương thức có nhiều tham số để giảm bớt sự phức tạp và tăng tính rõ ràng.                                                                                             |
| Partial Response                   | Trả về một phần của phản hồi ngay lập tức và phần còn lại sau khi xử lý hoàn tất, giúp cải thiện hiệu suất và trải nghiệm người dùng.                                    | Sử dụng trong các hệ thống web để trả về phần giao diện người dùng ngay lập tức và tải phần còn lại khi cần.                                                                                       |
| Pipeline                           | Tách các tác vụ xử lý phức tạp thành các bước đơn giản hơn, mỗi bước thực hiện một phần công việc và chuyển kết quả cho bước tiếp theo.                                 | Sử dụng trong các hệ thống xử lý dữ liệu hoặc xử lý ảnh để chia nhỏ công việc thành các bước xử lý liên tiếp.                                                                                      |
| Poison Pill                        | Một thông điệp đặc biệt gửi tới một hàng đợi để báo hiệu rằng không có công việc nào nữa và các luồng xử lý có thể dừng lại.                                               | Sử dụng trong các hệ thống message queue để quản lý việc dừng lại an toàn các worker khi không còn công việc nào cần xử lý.                                                                       |
| Presentation Model                 | Một mẫu thiết kế trong đó mô hình giao diện người dùng được tách biệt hoàn toàn khỏi mô hình nghiệp vụ, giúp cải thiện khả năng kiểm thử và bảo trì.                    | Sử dụng trong phát triển phần mềm để tách biệt logic nghiệp vụ và giao diện người dùng, giúp dễ dàng kiểm thử và bảo trì.                                                                          |
| Private Class Data                 | Bảo vệ dữ liệu của một lớp bằng cách cung cấp các phương thức truy cập hạn chế, ngăn ngừa các truy cập trái phép.                                                        | Sử dụng trong lập trình hướng đối tượng để bảo vệ dữ liệu nhạy cảm và đảm bảo tính toàn vẹn của dữ liệu.                                                                                           |
| Producer-Consumer                  | Một mẫu thiết kế để quản lý việc sản xuất và tiêu thụ các đối tượng một cách đồng bộ, sử dụng một hàng đợi chung để lưu trữ các đối tượng chờ xử lý.                     | Sử dụng trong lập trình đa luồng để quản lý việc sản xuất và tiêu thụ dữ liệu giữa các luồng khác nhau.                                                                                           |
| Promise                            | Đại diện cho một giá trị hoặc một hành động sẽ hoàn thành trong tương lai, giúp quản lý các tác vụ bất đồng bộ một cách dễ dàng hơn.                                     | Sử dụng trong lập trình bất đồng bộ để quản lý các tác vụ như gọi API hoặc xử lý dữ liệu trong tương lai.                                                                                          |
| Property                           | Một thuộc tính của đối tượng được quản lý bởi các phương thức getter và setter, giúp kiểm soát và bảo vệ dữ liệu.                                                        | Sử dụng trong lập trình hướng đối tượng để quản lý và kiểm soát truy cập tới dữ liệu của đối tượng.                                                                                                |
| Prototype                          | Cho phép tạo các đối tượng mới bằng cách sao chép các đối tượng hiện có, giúp tiết kiệm thời gian và tài nguyên.                                                         | Sử dụng khi việc khởi tạo đối tượng mới tốn kém và cần tái sử dụng các đối tượng hiện có bằng cách sao chép chúng.                                                                                 |
| Proxy                              | Cung cấp một đại diện hoặc một placeholder cho một đối tượng khác để kiểm soát việc truy cập tới đối tượng đó.                                                           | Sử dụng để kiểm soát truy cập tới các đối tượng tốn kém hoặc nhạy cảm như tài nguyên mạng, cơ sở dữ liệu hoặc dịch vụ bên ngoài.                                                                    |
| Queue Load Leveling                | Phân phối tải đều giữa các hàng đợi để đảm bảo rằng không có hàng đợi nào bị quá tải hoặc thiếu tải.                                                                     | Sử dụng trong các hệ thống phân tán để quản lý tải công việc và đảm bảo hiệu suất ổn định.                                                                                                        |

Tiếp tục với bảng với 15 mẫu thiết kế tiếp theo:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Reactor                            | Một mẫu thiết kế để xử lý các sự kiện bất đồng bộ bằng cách đăng ký các xử lý sự kiện và kích hoạt chúng khi sự kiện xảy ra.                                              | Sử dụng trong các hệ thống xử lý sự kiện hoặc mạng để quản lý các tác vụ bất đồng bộ một cách hiệu quả.                                                                                           |
| Registry                           | Một mẫu thiết kế cung cấp một cơ chế để lưu trữ và truy xuất các đối tượng một cách toàn cầu.                                                                             | Sử dụng trong các hệ thống lớn để quản lý các đối tượng và dịch vụ một cách tập trung.                                                                                                            |
| Repository                         | Một mẫu thiết kế để quản lý việc lưu trữ, truy xuất và quản lý các đối tượng dữ liệu, tách biệt logic truy cập dữ liệu khỏi logic nghiệp vụ.                              | Sử dụng trong các ứng dụng cần quản lý dữ liệu phức tạp và truy xuất dữ liệu một cách hiệu quả.                                                                                                    |
| Resource Acquisition Is Initialization (RAII) | Một kỹ thuật trong đó việc khởi tạo tài nguyên và giải phóng tài nguyên được gắn kết với vòng đời của một đối tượng.                                                 | Sử dụng trong lập trình để quản lý tài nguyên như bộ nhớ, file, kết nối mạng một cách an toàn và tự động.                                                                                          |
| Retry                              | Một mẫu thiết kế để tự động thực hiện lại một hành động nếu nó thất bại, thường được sử dụng trong các hệ thống không đồng bộ hoặc mạng.                                    | Sử dụng để tăng độ tin cậy của hệ thống bằng cách thử lại các tác vụ thất bại như gọi API, truy vấn cơ sở dữ liệu hoặc gửi email.                                                                 |
| Role Object                        | Một mẫu thiết kế để định nghĩa các vai trò khác nhau mà một đối tượng có thể đảm nhận, mỗi vai trò có thể có hành vi và thuộc tính riêng.                                   | Sử dụng trong các hệ thống phức tạp để quản lý các vai trò và hành vi của các đối tượng một cách linh hoạt.                                                                                       |
| Saga                               | Một mẫu thiết kế để quản lý các giao dịch phân tán bằng cách chia chúng thành các bước nhỏ hơn, mỗi bước có thể hoàn nguyên được nếu có lỗi xảy ra.                        | Sử dụng trong các hệ thống phân tán để đảm bảo tính nhất quán dữ liệu và khả năng phục hồi sau lỗi.                                                                                               |
| Separated Interface                | Một mẫu thiết kế để tách biệt giao diện của một lớp từ lớp thực thi của nó, giúp dễ dàng thay thế và mở rộng các lớp thực thi khác nhau.                                    | Sử dụng để tạo ra các API hoặc giao diện mà có thể dễ dàng thay thế hoặc mở rộng mà không ảnh hưởng đến mã nguồn sử dụng giao diện đó.                                                              |
| Serialized Entity                  | Một mẫu thiết kế để lưu trữ trạng thái của một đối tượng vào một định dạng có thể truyền tải hoặc lưu trữ, và sau đó tái tạo lại đối tượng từ định dạng đó.                   | Sử dụng trong các hệ thống cần truyền tải hoặc lưu trữ trạng thái của đối tượng như lưu trữ phiên làm việc hoặc truyền tải dữ liệu giữa các hệ thống.                                              |
| Serialized Lob                     | Một mẫu thiết kế để lưu trữ các đối tượng lớn vào cơ sở dữ liệu dưới dạng các trường blob và chuyển đổi chúng thành các đối tượng khi cần.                                  | Sử dụng trong các hệ thống lưu trữ các đối tượng lớn như hình ảnh, video hoặc tài liệu trong cơ sở dữ liệu.                                                                                        |
| Servant                            | Một mẫu thiết kế để cung cấp các dịch vụ chung cho một nhóm các đối tượng, giúp chia sẻ các dịch vụ mà không cần mỗi đối tượng tự quản lý chúng.                           | Sử dụng trong các hệ thống cần chia sẻ các dịch vụ chung giữa nhiều đối tượng như dịch vụ in ấn hoặc lưu trữ.                                                                                       |
| Server Session                     | Một mẫu thiết kế để quản lý phiên làm việc của người dùng trên máy chủ, duy trì trạng thái và dữ liệu của người dùng giữa các yêu cầu.                                      | Sử dụng trong các ứng dụng web để quản lý phiên làm việc của người dùng, giữ lại thông tin và trạng thái của người dùng trong suốt phiên làm việc.                                                 |
| Service Layer                      | Một mẫu thiết kế để tách biệt logic nghiệp vụ từ các lớp khác bằng cách đưa logic đó vào một lớp dịch vụ riêng biệt, giúp dễ dàng quản lý và mở rộng.                       | Sử dụng trong các ứng dụng doanh nghiệp để tổ chức logic nghiệp vụ vào một lớp riêng biệt, tăng tính bảo trì và mở rộng của mã nguồn.                                                              |
| Service Locator                    | Một mẫu thiết kế để cung cấp một cơ chế để tìm kiếm các dịch vụ cần thiết trong một ứng dụng một cách linh hoạt và không phụ thuộc.                                          | Sử dụng để quản lý việc tìm kiếm và sử dụng các dịch vụ trong ứng dụng một cách linh hoạt, giúp giảm sự phụ thuộc và tăng tính dễ bảo trì.                                                         |
| Service to Worker                  | Một mẫu thiết kế để kết hợp các mẫu Front Controller và View Helper, quản lý các yêu cầu từ người dùng và tạo ra các phản hồi tương ứng.                                   | Sử dụng trong các ứng dụng web để quản lý luồng yêu cầu và phản hồi từ người dùng, kết hợp việc điều khiển và xử lý hiển thị.                                                                      |

Tiếp tục với bảng với các mẫu thiết kế còn lại:

| **Java Design Pattern**            | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Sharding                           | Một kỹ thuật để chia nhỏ cơ sở dữ liệu lớn thành các phần nhỏ hơn (shard), mỗi shard được lưu trữ trên một máy chủ khác nhau để cải thiện hiệu suất và khả năng mở rộng.   | Sử dụng trong các hệ thống cần quản lý lượng dữ liệu lớn và yêu cầu khả năng mở rộng cao, như các hệ thống mạng xã hội hoặc thương mại điện tử.                                                    |
| Single Table Inheritance           | Một chiến lược kế thừa trong ORM, trong đó tất cả các lớp con được lưu trữ trong một bảng duy nhất với một cột phân loại để xác định lớp cụ thể của mỗi hàng.              | Sử dụng trong các hệ thống ORM để quản lý kế thừa giữa các lớp một cách hiệu quả, giảm thiểu số lượng bảng cần thiết.                                                                              |
| Singleton                          | Đảm bảo một lớp chỉ có một thể hiện duy nhất và cung cấp một điểm truy cập toàn cầu tới thể hiện đó.                                                                      | Sử dụng khi cần một đối tượng duy nhất để quản lý tài nguyên chung như kết nối cơ sở dữ liệu hoặc cấu hình hệ thống.                                                                               |
| Spatial Partition                  | Chia không gian thành các phần nhỏ hơn để dễ dàng quản lý và tìm kiếm các đối tượng trong không gian đó.                                                                  | Sử dụng trong các hệ thống đồ họa máy tính hoặc trò chơi để quản lý và tìm kiếm các đối tượng trong không gian 2D hoặc 3D một cách hiệu quả.                                                        |
| Special Case                       | Tạo ra một lớp đặc biệt để xử lý các trường hợp ngoại lệ hoặc các tình huống đặc biệt mà không làm thay đổi logic chính của ứng dụng.                                      | Sử dụng để quản lý các trường hợp đặc biệt hoặc ngoại lệ trong logic nghiệp vụ mà không làm phức tạp hóa mã nguồn chính.                                                                            |
| Specification                      | Định nghĩa các tiêu chí hoặc điều kiện cho một đối tượng và cung cấp một cách để kiểm tra đối tượng đó có thỏa mãn các tiêu chí hay không.                               | Sử dụng để tách biệt các tiêu chí kiểm tra và logic nghiệp vụ, giúp mã nguồn dễ đọc và dễ bảo trì hơn.                                                                                                    |
| State                              | Cho phép một đối tượng thay đổi hành vi của mình khi trạng thái nội bộ của nó thay đổi, như thể nó thuộc một lớp khác.                                                  | Sử dụng trong các hệ thống cần quản lý trạng thái phức tạp của đối tượng, như máy trạng thái hoặc hệ thống điều khiển.                                                                             |
| Stategy                            | Định nghĩa một họ các thuật toán, đóng gói từng thuật toán và làm cho chúng có thể hoán đổi cho nhau.                                                                    | Sử dụng để lựa chọn và thay đổi thuật toán tại runtime mà không ảnh hưởng đến mã nguồn sử dụng thuật toán đó.                                                                                       |
| Template Method                    | Định nghĩa một khung sườn của thuật toán trong một phương thức, để cho các lớp con có thể định nghĩa lại các bước cụ thể của thuật toán mà không làm thay đổi cấu trúc của nó. | Sử dụng để tái sử dụng một phần thuật toán và cho phép tùy biến các bước cụ thể trong các lớp con.                                                                                                 |
| Thread Pool                        | Quản lý việc thực thi các tác vụ đồng thời bằng cách sử dụng một nhóm các luồng được tái sử dụng, giúp cải thiện hiệu suất và quản lý tài nguyên.                          | Sử dụng trong các hệ thống yêu cầu thực thi nhiều tác vụ đồng thời để quản lý và tối ưu hóa việc sử dụng luồng.                                                                                     |
| Three-Tier Architecture            | Chia ứng dụng thành ba tầng: tầng giao diện người dùng, tầng logic nghiệp vụ và tầng cơ sở dữ liệu, giúp tách biệt các mối quan tâm và dễ dàng quản lý.                    | Sử dụng trong phát triển ứng dụng web và doanh nghiệp để tổ chức mã nguồn một cách rõ ràng và dễ bảo trì.                                                                                          |
| Transaction Script                 | Một mẫu thiết kế để quản lý các giao dịch bằng cách viết các kịch bản thực hiện từng bước của giao dịch, giúp đơn giản hóa việc quản lý giao dịch.                         | Sử dụng trong các hệ thống cần quản lý các giao dịch phức tạp, đảm bảo tính nhất quán và an toàn của dữ liệu.                                                                                      |
| Transfer Object                    | Đóng gói dữ liệu vào các đối tượng chuyển đổi để truyền tải dữ liệu giữa các lớp hoặc các tầng của ứng dụng.                                                              | Sử dụng để giảm thiểu số lượng lời gọi phương thức và tối ưu hóa việc truyền tải dữ liệu trong các hệ thống phân tán.                                                                               |
| Twin                               | Một mẫu thiết kế để tách biệt các khía cạnh khác nhau của một đối tượng vào các đối tượng "twin", mỗi đối tượng quản lý một khía cạnh cụ thể của đối tượng chính.           | Sử dụng trong các hệ thống phức tạp để quản lý các khía cạnh khác nhau của một đối tượng mà không làm phức tạp hóa đối tượng chính.                                                                |
| Type Object                        | Một mẫu thiết kế để tạo ra các đối tượng kiểu động, cho phép định nghĩa và quản lý các loại đối tượng khác nhau một cách linh hoạt.                                        | Sử dụng để quản lý các loại đối tượng và hành vi khác nhau mà không cần thay đổi mã nguồn chính, giúp tăng tính mở rộng và linh hoạt của ứng dụng.                                                  |
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| **Java Design Pattern**           | **Ý nghĩa**                                                                                                                                                              | **Cách sử dụng thực tế**                                                                                                                                                                           |
|-----------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Paging Controller                 | Một mẫu thiết kế để quản lý việc phân trang dữ liệu trong ứng dụng, chia nhỏ dữ liệu thành các trang để tải và hiển thị một cách hiệu quả.                                | Sử dụng trong các ứng dụng web hoặc mobile khi cần hiển thị dữ liệu phân trang từ một nguồn dữ liệu lớn, giúp cải thiện hiệu suất và trải nghiệm người dùng.                                       |
| Page Object                       | Một mẫu thiết kế để đóng gói các phần giao diện người dùng và hành vi của họ vào các đối tượng, giúp quản lý và tái sử dụng mã nguồn giao diện người dùng một cách dễ dàng hơn. | Sử dụng trong kiểm thử tự động để tạo ra các đối tượng đại diện cho các trang web hoặc ứng dụng và thực hiện các tương tác giao diện với chúng một cách tự động.                                  |
| Parameter Object                  | Một mẫu thiết kế để đóng gói các tham số liên quan vào một đối tượng duy nhất, giúp quản lý và truyền tải tham số một cách dễ dàng hơn.                                    | Sử dụng trong các phương thức hoặc hàm có nhiều tham số để cải thiện đọc mã nguồn và giảm thiểu lỗi khi truyền tham số.                                                                           |
| Partial Response                  | Một mẫu thiết kế để trả về chỉ một phần dữ liệu cần thiết trong một yêu cầu, giúp tối ưu hóa băng thông và tăng tốc độ phản hồi của ứng dụng.                           | Sử dụng trong các dịch vụ API để trả về chỉ các trường dữ liệu cần thiết cho khách hàng, giảm lượng dữ liệu truyền tải và tăng hiệu suất của ứng dụng.                                         |
| Poison Pill                       | Một mẫu thiết kế để kết thúc hoặc ngăn chặn việc xử lý các yêu cầu hoặc thông điệp bằng cách chèn một thông điệp đặc biệt vào hàng đợi.                                     | Sử dụng trong các hệ thống gửi và nhận thông điệp để gửi một tín hiệu để dừng xử lý hoặc xác nhận việc kết thúc xử lý dữ liệu.                                                                 |
| Presentation Model                | Một mẫu thiết kế để tạo ra một lớp trung gian giữa dữ liệu và giao diện người dùng, giúp kiểm soát và xử lý dữ liệu trước khi hiển thị lên giao diện.                   | Sử dụng trong các ứng dụng MVC để tách biệt logic nghiệp vụ và dữ liệu khỏi giao diện người dùng, giúp mã nguồn trở nên dễ bảo trì và mở rộng.                                                    |
| Producer-Consumer                 | Một mẫu thiết kế để tổ chức luồng làm việc giữa các người sản xuất dữ liệu và các người tiêu thụ dữ liệu, giúp điều tiết tốc độ xử lý dữ liệu.                          | Sử dụng trong các hệ thống đa luồng để quản lý sản xuất và tiêu thụ dữ liệu một cách hiệu quả, đảm bảo sự cân bằng giữa tốc độ xử lý và tốc độ sản xuất.                                       |
| Caproperty                        | Một mẫu thiết kế để đóng gói tính năng có thể thay đổi một cách an toàn vào một đối tượng, giúp quản lý và thực hiện các tính năng có thể được kích hoạt hoặc tắt.      | Sử dụng trong các ứng dụng cần quản lý tính năng dựa trên quyền truy cập hoặc cấu hình của người dùng, giúp linh hoạt trong việc điều chỉnh hành vi của ứng dụng.                                   |
| Speculative Retry                 | Một mẫu thiết kế để thử lại một hành động nếu nó có thể thành công trong tương lai, dựa trên một giả định hoặc dự đoán.                                                  | Sử dụng trong các hệ thống xử lý lỗi để tự động thử lại các hoạt động có thể thành công trong tương lai, dựa trên kinh nghiệm hoặc dự đoán của hệ thống.                                         |
| Throttling                        | Một mẫu thiết kế để kiểm soát và giới hạn tốc độ hoặc tần suất của các yêu cầu hoặc sự kiện, giúp bảo vệ hệ thống khỏi quá tải hoặc tấn công từ chối dịch vụ (DoS).        | Sử dụng trong các ứng dụng web hoặc API để giảm tác động của các tác nhân gây ra quá tải hoặc tấn công DoS bằ |
| Tolerant Reader                   | Một mẫu thiết kế để đọc dữ liệu từ các nguồn không đáng tin cậy hoặc không tuân thủ theo các chuẩn, giúp ứng dụng xử lý dữ liệu một cách linh hoạt và tự tin hơn.       | Sử dụng trong các hệ thống giao tiếp với các dịch vụ hoặc API bên ngoài, nơi dữ liệu có thể không được đảm bảo đầy đủ hoặc chính xác, để xử lý các tình huống không mong muốn một cách an toàn.     |
| Trampoline                        | Một mẫu thiết kế để tạo ra một chuỗi các lời gọi hàm qua lại giữa các phương thức, giúp kiểm soát việc thực thi và giảm thiểu sự đệ quy sâu.                             | Sử dụng trong các hệ thống yêu cầu đệ quy hoặc gọi lại nhiều lần, để giảm thiểu sự cồng kềnh và nguy cơ gặp phải tràn bộ nhớ.                                                                   |
| Update Method                     | Một mẫu thiết kế để cập nhật trạng thái của một đối tượng thông qua một phương thức cập nhật duy nhất, giúp đảm bảo tính nhất quán và an toàn của dữ liệu.                | Sử dụng trong các hệ thống cần cập nhật trạng thái của đối tượng một cách an toàn và nhất quán, tránh các vấn đề về đồng bộ hóa hoặc xung đột dữ liệu.                                        |
| Value Object                      | Một mẫu thiết kế để đại diện cho một giá trị không thay đổi, không thể thay đổi, hoặc không đổi như một cách để đóng gói dữ liệu và chuyển giao giữa các phần của ứng dụng. | Sử dụng để biểu diễn các giá trị cố định hoặc không thay đổi trong ứng dụng, như địa chỉ, ngày tháng, hoặc các giá trị hằng số, để giảm thiểu sự phức tạp và cải thiện tính mở rộng của mã nguồn. |
| Version Number                    | Một mẫu thiết kế để quản lý và theo dõi các phiên bản của các đối tượng hoặc dữ liệu trong hệ thống, giúp kiểm soát và duy trì sự tương thích giữa các phiên bản khác nhau.  | Sử dụng trong các hệ thống cần quản lý và theo dõi sự thay đổi của dữ liệu hoặc phần mềm qua các phiên bản, đảm bảo tính nhất quán và tương thích giữa các phiên bản khác nhau.              |
| Virtual Proxy                     | Một mẫu thiết kế để tạo ra một đối tượng giả mạo hoặc đại diện cho một đối tượng thực sự, giúp kiểm soát việc truy cập và tối ưu hóa tải trọng của hệ thống.             | Sử dụng trong các hệ thống cần tạo ra các đối tượng phức tạp hoặc tốn kém tài nguyên mà không cần tải toàn bộ đối tượng vào bộ nhớ, giảm thiểu thời gian khởi tạo và tăng hiệu suất của ứng dụng.  |                                                                                                                                                                 | **Cách sử dụng thực tế**                                                                                                                                                                            |
|---------------------------------- |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Visitor                           | Một mẫu thiết kế để thực hiện các thao tác hoặc tính toán trên các đối tượng trong một cấu trúc đối tượng mà không làm thay đổi cấu trúc của chúng, bằng cách sử dụng các đối tượng "khách" độc lập. | Sử dụng trong các hệ thống cần thực hiện các thao tác hoặc tính toán phức tạp trên các đối tượng trong một cấu trúc đối tượng phức tạp, giúp tách biệt logic xử lý và đối tượng cơ sở, dễ dàng mở rộng và bảo trì mã nguồn.      |
